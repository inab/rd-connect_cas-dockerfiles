#!/bin/bash

# Setting up the prefix
if [ -z "$skipPrefixProcessing" -a $# -gt 0 ] ; then
	prefix="$1"
	shift
else
	prefix="demo"
fi
origPrefix="${prefix}"

# Adding a separator (if needed)
if [ "$prefix" != "" ] ; then
	prefix+=_
fi

declare -a instances=(
	"casldap"
	"cas"
	"pla"
	"umi"
)

# Format: docker instance name, docker image
declare -A images=(
	["casldap"]="rd-connect.eu/cas-ldap:cas-4.1.x"
	["cas"]="rd-connect.eu/rdconnect_cas:cas-4.1.x"
	["pla"]="rd-connect.eu/phpldapadmin:latest"
	["umi"]="rd-connect.eu/rdconnect-umi:latest"
)


docker_start_instances() {
	local prefix="$1"
	
	local instance
	local -a prefixInstances
	#for instance in "${!images[@]}" ; do
	for instance in "${instances[@]}" ; do
		prefixInstances+=( "${prefix}${instance}" )
		#echo "key  : $instance"
		#echo "value: ${images[$instance]}"
	done
	docker start "${prefixInstances[@]}"
}

docker_stop_instances() {
	local prefix="$1"
	
	local instance
	local -a prefixInstances
	#for instance in "${!images[@]}" ; do
	for instance in "${instances[@]}" ; do
		prefixInstances=( "${prefix}${instance}" "${prefixInstances[@]}" )
		#echo "key  : $instance"
		#echo "value: ${images[$instance]}"
	done
	docker stop "${prefixInstances[@]}"
}

docker_remove_instances() {
	local prefix="$1"
	
	local instance
	local -a prefixInstances
	#for instance in "${!images[@]}" ; do
	for instance in "${instances[@]}" ; do
		prefixInstances=( "${prefix}${instance}" "${prefixInstances[@]}" )
		#echo "key  : $instance"
		#echo "value: ${images[$instance]}"
	done
	docker rm "${prefixInstances[@]}"
}


docker_save_images() {
	local archiveFile="$1"
	
	local instance
	local -a imageList
	#for instance in "${!images[@]}" ; do
	for instance in "${instances[@]}" ; do
		imageList+=( "${images[$instance]}" )
		#echo "key  : $instance"
		#echo "value: ${images[$instance]}"
	done
	docker save -o "${archiveFile}" "${imageList[@]}"
}


declare -A hostnames=(
	["casldap"]="ldap.rd-connect.eu"
	["cas"]="rdconnectcas.rd-connect.eu"
	["pla"]="rdconnect-pla.rd-connect.eu"
	["umi"]="rdconnect-umi.rd-connect.eu"
)

# Format: docker image , docker volume , mountpoint in the docker image

# LDAP
declare -a CASLDAPconf=( "casldap"	"ldap_conf"	"/etc/openldap" )
declare -a CASLDAPdb=( "casldap"	"ldap_db"	"/var/lib/ldap" )
declare -a CASLDAPlogs=( "casldap"	"ldap_logs"	"/var/log" )

# CAS
declare -a CASconf=( "cas"	"cas_conf"	"/etc/cas" )
declare -a CASTOMCATconf=( "cas"	"tomcat_conf"	"/etc/tomcat7" )
declare -a CASlogs=( "cas"	"cas_logs"	"/var/log" )
declare -a PWMstate=( "cas"	"pwm_state"	"/var/lib/pwm" )

# PLA
declare -a PLAconf=( "pla"	"pla_conf"	"/etc/phpldapadmin" )
declare -a PLAldap=( "pla"	"pla_ldap"	"/etc/openldap" )
declare -a PLApki=( "pla"	"pla_pki"	"/etc/pki/tls" )
declare -a PLAlogs=( "pla"	"pla_logs"	"/var/log/httpd" )

# UMI
declare -a UMIconf=( "umi"	"umi_conf"	"/home/rdconnect-rest/RDConnect-UserManagement-REST-API/configs" )
declare -a UMIldap=( "umi"	"umi_ldap"	"/etc/openldap" )
declare -a UMIpki=( "umi"	"umi_pki"	"/etc/pki/tls" )
declare -a UMIlogs=( "umi"	"umi_logs"	"/var/log/httpd" )

declare -a volumes=(
	CASLDAPconf[@]
	CASLDAPdb[@]
	CASLDAPlogs[@]
	CASconf[@]
	CASTOMCATconf[@]
	CASlogs[@]
	PWMstate[@]
	PLAconf[@]
	PLAldap[@]
	PLApki[@]
	PLAlogs[@]
	UMIconf[@]
	UMIldap[@]
	UMIpki[@]
	UMIlogs[@]
)

numVolumes=${#volumes[@]}

declare -a cas_casldap=( "cas"	"casldap" )
declare -a pla_casldap=( "pla"	"casldap" )
declare -a umi_casldap=( "umi"	"casldap" )
declare -a umi_cas=( "umi"	"cas" )

declare -a links=(
	cas_casldap[@]
	pla_casldap[@]
	umi_casldap[@]
	umi_cas[@]
)

numLinks=${#links[@]}

## Loop and print it.  Using offset and length to extract values
#for ((iVol=0; iVol<$numVolumes; iVol++)) ; do
#	instanceName="${prefix}${!volumes[iVol]:0:1}"
#	volumeName="${prefix}${!volumes[iVol]:1:1}"
#	mountPoint="${!volumes[iVol]:2:1}"
#	echo "Instance ${instanceName}"
#	echo "volume ${volumeName}"
#	echo "mountpoint ${mountPoint}"
#done

docker_init_volumes() {
	local prefix="$1"
	local iVol
	
	# Loop and print it.  Using offset and length to extract values
	for ((iVol=0; iVol<$numVolumes; iVol++)) ; do
		# Bash 4.2 behaves strange on these
		#local instanceName="${prefix}${!volumes[iVol]:0:1}"
		#local volumeName="${prefix}${!volumes[iVol]:1:1}"
		#local mountPoint="${!volumes[iVol]:2:1}"
		# So these behave better
		local -a volume=( "${!volumes[iVol]}" )
		local volumeName="${prefix}${volume[1]}"
		docker volume create --name "${volumeName}"
	done
}

docker_drop_volumes() {
	local prefix="$1"
	local iVol
	
	# Loop and print it.  Using offset and length to extract values
	for ((iVol=0; iVol<$numVolumes; iVol++)) ; do
		# Bash 4.2 behaves strange on these
		#local instanceName="${prefix}${!volumes[iVol]:0:1}"
		#local volumeName="${prefix}${!volumes[iVol]:1:1}"
		#local mountPoint="${!volumes[iVol]:2:1}"
		# So these behave better
		local -a volume=( "${!volumes[iVol]}" )
		local volumeName="${prefix}${volume[1]}"
		docker volume rm "${volumeName}"
	done
}

docker_populate_volumes() {
	local prefix="$1"
	local tvol="$2"
	local iVol

	for ((iVol=0; iVol<$numVolumes; iVol++)) ; do
		local -a volume=( "${!volumes[iVol]}" )
		local origInstanceName="${volume[0]}"
		local instanceName="${prefix}${origInstanceName}"
		local volumeName="${prefix}${volume[1]}"
		local mountPoint="${volume[2]}"
		local imageName="${images[$origInstanceName]}"
	
		# This is to be sure the volume does exist
		docker volume create --name "${volumeName}"
		#docker run --rm -v "${volumeName}":"${tvol}" "$imageName" /bin/bash -c "ls /"
		#docker run --rm -v "${volumeName}":"${tvol}" "$imageName" /bin/bash -c "cp -aT '${mountPoint}' '${tvol}' && chown '--reference=${mountPoint}' '${tvol}' && chmod '--reference=${mountPoint}' '${tvol}' && ls -la '${tvol}'"
		docker run --rm -v "${volumeName}":"${tvol}" "$imageName" /bin/bash -c "cp -aT '${mountPoint}' '${tvol}' && chown '--reference=${mountPoint}' '${tvol}' && chmod '--reference=${mountPoint}' '${tvol}'"
	done
}

# This is an improved version of docker_populate_volumes, as it merges contents from a VM backup archive
docker_migrate_volumes() {
	local prefix="$1"
	local backupArchive="$2"
	local mappingsFile="$3"
	local tvol="$4"
	local iVol

	local remBackArch="/tmp/backupArchive.tar.gz"
	for ((iVol=0; iVol<$numVolumes; iVol++)) ; do
		local -a volume=( "${!volumes[iVol]}" )
		local origInstanceName="${volume[0]}"
		local instanceName="${prefix}${origInstanceName}"
		local origVolumeName="${volume[1]}"
		local volumeName="${prefix}${origVolumeName}"
		local mountPoint="${volume[2]}"
		local imageName="${images[$origInstanceName]}"
	
		# This is to be sure the volume does exist
		docker volume create --name "${volumeName}"
		#docker run --rm -v "${volumeName}":"${tvol}" "$imageName" /bin/bash -c "ls /"
		#docker run --rm -v "${volumeName}":"${tvol}" "$imageName" /bin/bash -c "cp -aT '${mountPoint}' '${tvol}' && chown '--reference=${mountPoint}' '${tvol}' && chmod '--reference=${mountPoint}' '${tvol}' && ls -la '${tvol}'"
		docker run --rm -v "${volumeName}":"${tvol}" "$imageName" \
			/bin/bash -c "cp -aT '${mountPoint}' '${tvol}' && chown '--reference=${mountPoint}' '${tvol}' && chmod '--reference=${mountPoint}' '${tvol}'"
		
		local path
		local filters
		local migVolumeName
		grep -v "^#" "${mappingsFile}" | grep -P "\t${origVolumeName}$" | while read path filters migVolumeName ; do
			# Removing the leading slash
			case "$path" in
				/*)
					path="${path:1}"
					;;
			esac
			
			# Setting up the strip-components
			local stripComp
			if [ -n "${path}" ] ; then
				stripComp="--strip-components=$(tr '/' '\n' <<< "${path}" | wc -l)"
			fi
			
			local -a filtersArr
			IFS=',' read -ra filtersArr <<< "${filters}"
			# Setting up the filtering conditions
			local -a compPaths=( )
			local filter
			for filter in "${filtersArr[@]}" ; do
				local newPath
				if [ -n "${path}" -o -n "${filter}" ] ; then
					if [ -z "${filter}" -o "${filter}" = '*' ] ; then
						newPath="${path}"
					elif [ -z "${path}" ] ; then
						newPath="${filter}"
					else
						newPath="${path}/${filter}"
					fi
				fi
				
				if [ -n "${newPath}" ] ; then
					compPaths=( "'${newPath}'" "${compPaths[@]}" )
				fi
			done
			
			if [ "${#compPaths[@]}" -gt 0 ] ; then
				docker run --rm -v "${volumeName}":"${tvol}" -v "${backupArchive}":"${remBackArch}" "$imageName" \
					/bin/bash -c "tar --acls --xattrs -z -x -C '${tvol}' $stripComp -p -f '${remBackArch}' ${compPaths[@]}"
			fi
		done
	done
}

docker_create() {
	local prefix="$1"
	local instance="$2"
	local hostPort
	local instancePort
	local iVol
	
	local -a portDecl
	if [ $# -ge 4 ] ; then
		hostPort="$3"
		instancePort="$4"
		portDecl+=( -p "${hostPort}:${instancePort}" )
	fi
	
	local -a volDecl
	for ((iVol=0; iVol<$numVolumes; iVol++)) ; do
		local -a volume=( "${!volumes[iVol]}" )
		local instanceName="${volume[0]}"
		if [ "$instanceName" = "$instance" ] ; then
			local volumeName="${prefix}${volume[1]}"
			local mountPoint="${volume[2]}"
			volDecl+=( -v "${volumeName}:${mountPoint}" )
		fi
	#	volumeName="${prefix}${!volumes[iVol]:1:1}"
	#	mountPoint="${!volumes[iVol]:2:1}"
	#	echo "Instance ${instanceName}"
	#	echo "volume ${volumeName}"
	#	echo "mountpoint ${mountPoint}"
	done
	
	local -a linkDecl
	for ((iLink=0; iLink<$numLinks; iLink++)) ; do
		local -a link=( "${!links[iLink]}" )
		local instanceName="${link[0]}"
		if [ "$instanceName" = "$instance" ] ; then
			destName="${link[1]}"
			hostName="${hostnames[$destName]}"
			linkDecl+=( --link "${prefix}${destName}:${hostName}" )
		fi
	done
	
	docker create --name "${prefix}${instance}" "${portDecl[@]}" "${volDecl[@]}" "${linkDecl[@]}" "${images[$instance]}"
}

backup_cas_vm() {
	local servername="$1"
	local destfile="$2"
	
	# First, prepare a file with all the paths to be backed up
	
	# Then 
	local tmplistfile="/tmp/${RANDOM}_$(date -Is).txt"
	
	local iVol
	rm -f "$tmplistfile" "$tmplistfile".dup
	for ((iVol=0; iVol<$numVolumes; iVol++)) ; do
		local -a volume=( "${!volumes[iVol]}" )
		local origInstanceName="${volume[0]}"
		#local instanceName="${prefix}${origInstanceName}"
		#local volumeName="${prefix}${volume[1]}"
		local mountPoint="${volume[2]}"
		#local imageName="${images[$origInstanceName]}"
		
		echo "$mountPoint" >> "$tmplistfile".dup
	done
	sort -u "$tmplistfile".dup > "$tmplistfile".sorted
	
	scp "$tmplistfile".sorted root@"$servername":"$tmplistfile"
	rm -f "$tmplistfile".dup "$tmplistfile".sorted
	ssh root@"$servername" "tar --selinux --acls --xattrs -z -c -C / -p -T '$tmplistfile' -f - && rm -f '$tmplistfile'" > "$destfile"
}
